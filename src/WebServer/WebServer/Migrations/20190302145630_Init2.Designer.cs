// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebServer.Models;

namespace WebServer.Migrations
{
    [DbContext(typeof(HotelServicesDbContext))]
    [Migration("20190302145630_Init2")]
    partial class Init2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("HotelServicesNetCore.Authorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SessionId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Authorizations");
                });

            modelBuilder.Entity("HotelServicesNetCore.Order", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Cost");

                    b.Property<bool>("IsPaid");

                    b.Property<DateTime>("OrderDate");

                    b.Property<string>("ServiceId");

                    b.Property<long>("Units");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HotelServicesNetCore.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = "e08aa1a6-ac70-435c-bca7-3b47357fdcae", Name = "Клиент" },
                        new { Id = "35244ee3-a0c0-40b0-b2bd-637996bba961", Name = "Администратор" },
                        new { Id = "ef978a22-aaf4-48b6-b05e-01e500975173", Name = "Управляющий" }
                    );
                });

            modelBuilder.Entity("HotelServicesNetCore.ServiceInfo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("CostPerUnit");

                    b.Property<string>("ImgSrc");

                    b.Property<bool>("IsDeprecated");

                    b.Property<string>("Measurement");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ServiceInfos");

                    b.HasData(
                        new { Id = "cb693424-a8d2-44c6-adf7-3df9eb36626f", CostPerUnit = 1000m, ImgSrc = "~/images/services/spa.png", IsDeprecated = false, Measurement = "час.", Name = "Спа" },
                        new { Id = "a9d98270-6f82-4c51-96b3-5a1edb742973", CostPerUnit = 2000m, ImgSrc = "~/images/services/eight.png", IsDeprecated = false, Measurement = "час", Name = "Бильярд восьмёрка" },
                        new { Id = "35e2c37b-aeb5-4759-aa1a-b60a7cbafb31", CostPerUnit = 2000m, ImgSrc = "~/images/services/nine.png", IsDeprecated = false, Measurement = "час", Name = "Бильярд девятка" },
                        new { Id = "c96987c0-2582-4e3c-b5d4-125a4031b387", CostPerUnit = 2000m, ImgSrc = "~/images/services/russian_billiards.png", IsDeprecated = false, Measurement = "час", Name = "Русский бильярд" }
                    );
                });

            modelBuilder.Entity("HotelServicesNetCore.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Fio");

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "183fdc5b-37a1-473c-b54c-f22a3637aad0", Fio = "Петров П.П", Login = "petr", Password = "11111", RoleId = "e08aa1a6-ac70-435c-bca7-3b47357fdcae" },
                        new { Id = "97e7d77e-813a-4eb4-bd70-32a8edd7df62", Fio = "Смирнов П.П", Login = "smr", Password = "22222", RoleId = "35244ee3-a0c0-40b0-b2bd-637996bba961" },
                        new { Id = "3a4faf23-34ad-4e99-ac4b-6614ea2f653a", Fio = "Симонов П.П", Login = "simon", Password = "33333", RoleId = "ef978a22-aaf4-48b6-b05e-01e500975173" },
                        new { Id = "cedeab94-8798-489d-a21c-1038cd543ceb", Fio = "Иванов П.П", Login = "iva", Password = "44444", RoleId = "e08aa1a6-ac70-435c-bca7-3b47357fdcae" },
                        new { Id = "e0215ca7-116e-4072-a5d8-9d63ffb15dd1", Fio = "Сидоров П.П", Login = "sidor", Password = "55555", RoleId = "e08aa1a6-ac70-435c-bca7-3b47357fdcae" }
                    );
                });

            modelBuilder.Entity("HotelServicesNetCore.Authorization", b =>
                {
                    b.HasOne("HotelServicesNetCore.User", "User")
                        .WithOne("Authorization")
                        .HasForeignKey("HotelServicesNetCore.Authorization", "UserId");
                });

            modelBuilder.Entity("HotelServicesNetCore.Order", b =>
                {
                    b.HasOne("HotelServicesNetCore.ServiceInfo", "Service")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceId");

                    b.HasOne("HotelServicesNetCore.User", "User")
                        .WithMany("Order")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HotelServicesNetCore.User", b =>
                {
                    b.HasOne("HotelServicesNetCore.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });
#pragma warning restore 612, 618
        }
    }
}
