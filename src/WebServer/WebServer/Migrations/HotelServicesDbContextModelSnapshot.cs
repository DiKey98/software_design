// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebServer.Models;

namespace WebServer.Migrations
{
    [DbContext(typeof(HotelServicesDbContext))]
    partial class HotelServicesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("HotelServicesNetCore.Authorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SessionId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Authorizations");
                });

            modelBuilder.Entity("HotelServicesNetCore.Order", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Cost");

                    b.Property<bool>("IsPaid");

                    b.Property<DateTime>("OrderDate");

                    b.Property<string>("ServiceId");

                    b.Property<long>("Units");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HotelServicesNetCore.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = "abd656d8-fc8e-4841-ac2b-5b1ce71fddf3", Name = "Клиент" },
                        new { Id = "a88ab815-05d6-4620-811c-4d30038b3a16", Name = "Администратор" },
                        new { Id = "5ccca18c-2cc1-4967-9cc9-c1d79aa503bb", Name = "Управляющий" }
                    );
                });

            modelBuilder.Entity("HotelServicesNetCore.ServiceInfo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("CostPerUnit");

                    b.Property<string>("ImgSrc");

                    b.Property<bool>("IsDeprecated");

                    b.Property<string>("Measurement");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ServiceInfos");

                    b.HasData(
                        new { Id = "e7c1e8f2-bee5-4a4a-9914-ca3cca123f23", CostPerUnit = 1000m, ImgSrc = "~/images/services/spa.png", IsDeprecated = false, Measurement = "час.", Name = "Спа" },
                        new { Id = "cc16e2cd-c3f4-4bb1-85cb-27f9b9fb665f", CostPerUnit = 2000m, ImgSrc = "~/images/services/eight.png", IsDeprecated = false, Measurement = "час", Name = "Бильярд восьмёрка" },
                        new { Id = "a67f3844-9591-4441-9642-16f959389c72", CostPerUnit = 2000m, ImgSrc = "~/images/services/nine.png", IsDeprecated = false, Measurement = "час", Name = "Бильярд девятка" },
                        new { Id = "a5841981-aa2e-4915-9127-d0ae5f366c2f", CostPerUnit = 2000m, ImgSrc = "~/images/services/russian_billiards.png", IsDeprecated = false, Measurement = "час", Name = "Русский бильярд" }
                    );
                });

            modelBuilder.Entity("HotelServicesNetCore.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Fio");

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "7d703faf-9766-445a-b4e0-04c13bc18620", Fio = "Петров П.П", Login = "petr", Password = "11111", RoleId = "abd656d8-fc8e-4841-ac2b-5b1ce71fddf3" },
                        new { Id = "1a975caf-1182-4a0b-a2bc-dd0504dec30d", Fio = "Смирнов П.П", Login = "smr", Password = "22222", RoleId = "a88ab815-05d6-4620-811c-4d30038b3a16" },
                        new { Id = "c877145c-da2a-449c-899b-3a8774a90781", Fio = "Симонов П.П", Login = "simon", Password = "33333", RoleId = "5ccca18c-2cc1-4967-9cc9-c1d79aa503bb" },
                        new { Id = "b3184e11-c1ec-4582-9d3c-aa154c794504", Fio = "Иванов П.П", Login = "iva", Password = "44444", RoleId = "abd656d8-fc8e-4841-ac2b-5b1ce71fddf3" },
                        new { Id = "0c732bb7-2263-4920-8638-4c6448ad5edf", Fio = "Сидоров П.П", Login = "sidor", Password = "55555", RoleId = "abd656d8-fc8e-4841-ac2b-5b1ce71fddf3" }
                    );
                });

            modelBuilder.Entity("HotelServicesNetCore.Authorization", b =>
                {
                    b.HasOne("HotelServicesNetCore.User", "User")
                        .WithOne("Authorization")
                        .HasForeignKey("HotelServicesNetCore.Authorization", "UserId");
                });

            modelBuilder.Entity("HotelServicesNetCore.Order", b =>
                {
                    b.HasOne("HotelServicesNetCore.ServiceInfo", "Service")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceId");

                    b.HasOne("HotelServicesNetCore.User", "User")
                        .WithMany("Order")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HotelServicesNetCore.User", b =>
                {
                    b.HasOne("HotelServicesNetCore.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });
#pragma warning restore 612, 618
        }
    }
}
